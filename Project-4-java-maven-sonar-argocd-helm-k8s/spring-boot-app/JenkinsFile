pipeline {
    agent { label 'Docker-Agent' }  // Run on the Docker Agent

    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Starting Checkout..."'
                // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
            }
        }

stage('Install Maven & Verify') {
            steps {
                script {
                    sh '''
                    echo "Pulling Maven Docker Image..."
                    docker pull sandeepkalathil/maven-abhishek-docker-agent:v1

                    echo "Checking Maven Version..."
                    docker run --rm sandeepkalathil/maven-abhishek-docker-agent:v1 mvn --version
                    '''
                }
            }
        }


        stage('Build and Test') {
            steps {
                script {
                    sh '''
                    echo "Building the project using Maven inside Docker..."
                    docker run --rm -v $(pwd)/Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app:/app -w /app sandeepkalathil/maven-abhishek-docker-agent:v1 mvn clean package
                    '''
                }
            }
        }
    

        stage('Static Code Analysis') {
    environment {
        SONAR_URL = "http://13.60.72.102:9000/"
    }
    steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            script {
                sh '''
                echo "Running SonarQube analysis inside Docker..."

                docker run --rm \
                -v $(pwd)/Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app:/app \
                -w /app \
                sandeepkalathil/maven-abhishek-docker-agent:v1 \
                mvn sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_URL}
                '''
            }
        }
    }
}

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "sandeepkalathil/ultimate-cicd:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh '''
                    cd Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "jenkins-projects"
                GIT_USER_NAME = "sandeepkalathil"
            }
            steps {
                withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    git config user.email "kalathilsandeep@gmail.com"
                    git config user.name "sandeep kalathil"
                    sed -i "s|\\(sandeepkalathil/ultimate-cicd:\\)[0-9]\\+|\\1${BUILD_NUMBER}|g" Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main

                    '''
                }
            }
        }
    }
}