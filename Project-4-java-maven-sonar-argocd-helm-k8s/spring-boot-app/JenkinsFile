    pipeline {
        agent { label 'Docker-Agent' }  // Run on Docker-Agent node

        stages {
            stage('Checkout') {
                steps {
                    sh 'echo "Starting Checkout..."'
                    // git clone or checkout code here
                }
            }

            stage('Check Docker') {
    steps {
        sh 'which docker || echo "Docker not found!"'
        sh 'docker --version'
    }
}

            stage('Build and Test') {
                agent {
                    docker {
                        image 'abhishekf5/maven-abhishek-docker-agent:v1'
                        args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                    }
                }
                steps {
                    sh 'echo "Listing project files:"'
                    sh 'ls -ltr'
                    sh 'cd Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                }
            }

            stage('Static Code Analysis') {
                agent {
                    docker {
                        image 'abhishekf5/maven-abhishek-docker-agent:v1'
                        args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                    }
                }
                environment {
                    SONAR_URL = "http://13.50.5.215:9000/"
                }
                steps {
                    withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh '''
                        cd Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                        '''
                    }
                }
            }

            stage('Build and Push Docker Image') {
                agent {
                    docker {
                        image 'docker:latest'
                        args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                    }
                }
                environment {
                    DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
                }
                steps {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                        cd Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                        echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
                        docker push ${DOCKER_IMAGE}
                        '''
                    }
                }
            }

            stage('Update Deployment File') {
                agent {
                    docker {
                        image 'alpine/git'
                        args '--user root'
                    }
                }
                environment {
                    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
                    GIT_USER_NAME = "iam-veeramalla"
                }
                steps {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                        git config user.email "abhishek.xyz@gmail.com"
                        git config user.name "Abhishek Veeramalla"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add Project-4-java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
